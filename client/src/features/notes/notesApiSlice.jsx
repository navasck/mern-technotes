import {
    createSelector,
    createEntityAdapter
} from "@reduxjs/toolkit";
import { apiSlice } from "../../app/api/apiSlice"

// sortComparer:

// In this case, you've provided a sortComparer function to the adapter. This function is used for sorting entities when needed.
// The sortComparer compares two entities (a and b) based on their completed property. The entities are sorted so that completed items come last.
// notesAdapter:

// notesAdapter is an instance of the entity adapter created for managing notes in your Redux store.
// It includes selectors and reducer functions generated by the createEntityAdapter.
const notesAdapter = createEntityAdapter({
    sortComparer: (a, b) => (a.completed === b.completed) ? 0 : a.completed ? 1 : -1
})


// initialState:

// initialState is obtained by calling notesAdapter.getInitialState(). This provides the initial state for the notes slice of the Redux store managed by the adapter.
// The initial state includes properties such as ids (an array of entity IDs) and entities (an object mapping IDs to entities).
const initialState = notesAdapter.getInitialState()

export const notesApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    getNotes: builder.query({
      query: () => '/notes',
      validateStatus: (response, result) => {
        return response.status === 200 && !result.isError;
      },
      transformResponse: (responseData) => {
        const loadedNotes = responseData.map((note) => {
          note.id = note._id;
          return note;
        });
        return notesAdapter.setAll(initialState, loadedNotes);
      },
      // Used by query endpoints. Determines which 'tag' is attached to the cached data returned by the query. Expects an array of tag type strings, an array of objects of tag types with ids, or a function that returns such an array.
      providesTags: (result, error, arg) => {
        if (result?.ids) {
          return [
            { type: 'Note', id: 'LIST' },
            ...result.ids.map((id) => ({ type: 'Note', id })),
          ];
        } else return [{ type: 'Note', id: 'LIST' }];
      },
    }),
    addNewNote: builder.mutation({
      query: (initialNote) => ({
        url: '/notes',
        method: 'POST',
        body: {
          ...initialNote,
        },
      }),
      // Used by mutation endpoints. Determines which cached data should be either re-fetched or removed from the cache. Expects the same shapes as providesTags.
      invalidatesTags: [{ type: 'Note', id: 'LIST' }],
    }),
    updateNote: builder.mutation({
      query: (initialNote) => ({
        url: '/notes',
        method: 'PATCH',
        body: {
          ...initialNote,
        },
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Note', id: arg.id }],
    }),
    deleteNote: builder.mutation({
      query: ({ id }) => ({
        url: `/notes`,
        method: 'DELETE',
        body: { id },
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Note', id: arg.id }],
    }),
  }),
});

export const {
    useGetNotesQuery,
    useAddNewNoteMutation,
    useUpdateNoteMutation,
    useDeleteNoteMutation,
} = notesApiSlice

// returns the query result object
export const selectNotesResult = notesApiSlice.endpoints.getNotes.select()

// creates memoized selector
const selectNotesData = createSelector(
    selectNotesResult,
    notesResult => notesResult.data // normalized state object with ids & entities
)

//getSelectors creates these selectors and we rename them with aliases using destructuring
export const {
    selectAll: selectAllNotes,
    selectById: selectNoteById,
    selectIds: selectNoteIds
    // Pass in a selector that returns the notes slice of state
} = notesAdapter.getSelectors(state => selectNotesData(state) ?? initialState)


// In the provided code, you are using the 'createEntityAdapter' from @reduxjs/toolkit to create an adapter for managing entities in the normalized state of your Redux store. This is commonly used for handling data normalization in a Redux store, especially in combination with RTK Query.

// The notesAdapter object generated by createEntityAdapter includes a set of selectors and reducer functions that are designed to work with the normalized state structure. Some commonly used selectors include selectAll, selectById, and selectIds.
//   usage eg: // Get initial state
// const initialState = notesAdapter.getInitialState();

// // Use selectors
// const allNotes = notesAdapter.selectAll(store.getState());
// const specificNote = notesAdapter.selectById(store.getState(), someNoteId);
// const noteIds = notesAdapter.selectIds(store.getState());

// These selectors allow you to easily access and manipulate the normalized state for your notes in a Redux store. The sorting logic defined in the sortComparer will be applied when using the selectors that return ordered arrays of entities.