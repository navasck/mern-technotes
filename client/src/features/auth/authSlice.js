import { createSlice } from '@reduxjs/toolkit';

// The createSlice function automatically generates action creators based on the reducers defined in the reducers field.
// A function that accepts an initial state, an object full of reducer functions, and a "slice name", and automatically generates action creators and action types that correspond to the reducers and state

// 'auth/setCredentials'  & 'auth/logOut'  -  action types
//  action types help identify the specific actions when they are dispatched.
const authSlice = createSlice({
  name: 'auth',
  initialState: { token: null },
  // A mapping from action types to action-type-specific case reducer functions. For every action type, a matching action creator will be generated using createAction().
  // Each key in the reducers object corresponds to an action type, and the associated function describes the state update logic for that action.
  // Actions generated by the createSlice function automatically use these reducers.
  reducers: {
    setCredentials: (state, action) => {
      const { accessToken } = action.payload;
      state.token = accessToken;
    },
    logOut: (state, action) => {
      state.token = null;
    },
  },
});

// exports the generated action creators for use in other parts of the application.
export const { setCredentials, logOut } = authSlice.actions;
//exports the reducer function to be used when configuring the Redux store.
export default authSlice.reducer;
// exports a selector function to retrieve the current token from the state. It assumes that the authentication slice is located under the 'auth' key in the Redux store.
// state.sliceName.property
export const selectCurrentToken = (state) => state.auth.token;

// extraReducers

// extraReducers is used to handle actions that are outside the scope of the standard case reducers defined in the reducers field.
// This is particularly useful when you want to handle actions from other slices or third-party libraries.
// extraReducers is optional, and you only need to use it when you have specific cases that don't fit neatly into the standard reducers defined in the reducers field.
// extraReducers provides a more flexible way to handle actions that are not specific to the current slice.
// extraReducers itself does not automatically generate action creators or action types.

// eg:
//  extraReducers: (builder) => {
//     builder
//       .addCase(someOtherAction, (state, action) => {
//         // Handle some other action
//       })
//       .addCase(anotherAction, (state, action) => {
//         // Handle another action
//       });
//     // Add more cases as needed
//   }

// someOtherAction and anotherAction are not automatically associated with action creators or action types. If you want to generate action creators for these additional actions, you need to create them manually using the createAction function provided by Redux Toolkit.

// import { createAction } from '@reduxjs/toolkit';

// export const someOtherAction = createAction('auth/someOtherAction');
// export const anotherAction = createAction('auth/anotherAction');

// Here, 'auth/someOtherAction' and 'auth/anotherAction' are manually specified action types for the actions that may be dispatched from outside the createSlice scope.

// These manually created action creators will then be used to dispatch actions, and their associated action types will be used in the extraReducers to handle the corresponding actions.

// Action
// An action is a plain JavaScript object that describes an intention to change the state
// eg: const setUser = (user) => ({
//   type: 'SET_USER',
//   payload: user,
// });

// setUser is an action creator that returns an action object with a type of 'SET_USER' and a payload containing user information.

// Reducer:
// A reducer is a pure function that takes the current state and an action as arguments and returns the next state.
// Reducers are responsible for specifying how the state should change in response to different actions.
